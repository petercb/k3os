---
version: 2.1

orbs:
  github: circleci/github-cli@2.3.0
  go: circleci/go@1
  docker: circleci/docker@2

executors:
  arm64:
    environment:
      ARCH: arm64
    docker:
      - image: cimg/go:1.20
    resource_class: arm.large
  amd64:
    environment:
      ARCH: amd64
    docker:
      - image: cimg/go:1.20
    resource_class: large

commands:
  generate-version:
    steps:
      - run:
          name: Retrieve version
          command: |
            #!/bin/bash
            if [ -n "$(git status --porcelain --untracked-files=no)" ]; then
                DIRTY="-dirty"
            fi

            COMMIT=$(git rev-parse --short HEAD)
            GIT_TAG=${CIRCLE_TAG:-$(git tag -l --contains HEAD | head -n 1)}

            if [[ -z "$DIRTY" && -n "$GIT_TAG" ]]; then
                VERSION=$GIT_TAG
            else
                VERSION="$(git describe --always --tags)${DIRTY}"
            fi

            if echo $VERSION | grep -q dirty; then
                VERSION=dev
            fi
            echo "${VERSION}"

            echo "export VERSION=${VERSION}" >> "${BASH_ENV}"

  install-cst:
    steps:
      - run:
          name: Install container-structure-test
          command: |
            destFile="${HOME}/bin/container-structure-test"
            mkdir -p "${HOME}/bin"
            curl -L -o "${destFile}" \
              https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
            chmod +x "${destFile}"

  run-cst:
    parameters:
      image:
        type: string
        default: ""
      pull:
        type: boolean
        default: false
      registry:
        type: string
        default: ghcr.io
      tag:
        type: string
        default: $CIRCLE_SHA1
    steps:
      - run:
          name: << parameters.image >> - container-structure-test
          command: >-
            container-structure-test test
            --image
            << parameters.registry >>/$CIRCLE_USERNAME/<< parameters.image >>:<< parameters.tag >>
            --config cst/<< parameters.image >>.yaml
            <<# parameters.pull >> --pull <</ parameters.pull >>
            --output junit
            --test-report << parameters.image >>-cst-results.xml
      - store_test_results:
          path: << parameters.image >>-cst-results.xml


jobs:
  build:
    parameters:
      executor:
        type: executor
        default: amd64
      push:
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: ghcr.io
          docker-username: CIRCLE_USERNAME
          docker-password: GITHUB_TOKEN
      - install-cst
      - generate-version
      - docker/build:
          cache_from: "ghcr.io/$CIRCLE_USERNAME/k3os:latest,\
            ghcr.io/$CIRCLE_USERNAME/k3os:${CIRCLE_BRANCH}"
          extra_build_args: >-
            --target=image
            --build-arg BUILDKIT_INLINE_CACHE=1
            --build-arg VERSION=$VERSION
          image: $CIRCLE_USERNAME/k3os
          registry: ghcr.io
          step-name: Docker build - k3os
          use-buildkit: true
      - run-cst:
          image: k3os
          registry: ghcr.io
      - docker/build:
          cache_from: ghcr.io/$CIRCLE_USERNAME/k3os:${$CIRCLE_SHA1}
          extra_build_args: >-
            --target=iso
            --build-arg BUILDKIT_INLINE_CACHE=1
            --build-arg VERSION=$VERSION
          image: $CIRCLE_USERNAME/k3os-iso
          registry: ghcr.io
          step-name: Docker build - k3os ISO
          use-buildkit: true
      - run-cst:
          image: k3os-iso
          registry: ghcr.io
      - docker/build:
          cache_from: "ghcr.io/$CIRCLE_USERNAME/k3os:${$CIRCLE_SHA1},\
            ghcr.io/$CIRCLE_USERNAME/k3os-iso:${$CIRCLE_SHA1}"
          extra_build_args: >-
            --target=output
            --build-arg BUILDKIT_INLINE_CACHE=1
            --build-arg VERSION=$VERSION
          image: $CIRCLE_USERNAME/k3os-output
          registry: ghcr.io
          step-name: Docker build - k3os output
          use-buildkit: true
      - run:
          name: Docker collect output
          command: |
            mkdir -p ./dist
            ID=$(docker create ghcr.io/${CIRCLE_USERNAME}/k3os-output:${$CIRCLE_SHA1})
            docker cp ${ID}:/output/k3os-${ARCH}.iso ./dist/
            docker cp ${ID}:/output/k3os-initrd-${ARCH} ./dist/
            docker cp ${ID}:/output/k3os-kernel-${ARCH}.squashfs ./dist/
            docker cp ${ID}:/output/k3os-kernel-version-${ARCH} ./dist/
            docker cp ${ID}:/output/k3os-rootfs-${ARCH}.tar.gz ./dist/
            docker cp ${ID}:/output/k3os-vmlinuz-${ARCH} ./dist/
            docker cp ${ID}:/output/sha256sum-${ARCH} ./dist/
            docker rm -fv ${ID}
      - run:
          name: Mount and test ISO
          command: |
            sudo mkdir -p /mnt/iso
            sudo mount -o loop ./dist/k3os-${ARCH}.iso /mnt/iso
            test -s /mnt/iso/efi.img
            test -s /mnt/iso/boot.catalog
            test -L /mnt/iso/sbin/crictl
            test -L /mnt/iso/sbin/ctr
            test -L /mnt/iso/sbin/init
            test -L /mnt/iso/sbin/k3os
            test -L /mnt/iso/sbin/k3s
            test -L /mnt/iso/sbin/kubectl
      - run:
          name: Unmount ISO
          command: sudo umount -q /mnt/iso
          when: always
      - when:
          condition:
            equal:
              - master
              - << pipeline.git.branch >>
          steps:
            - docker/build:
                cache_from: "ghcr.io/$CIRCLE_USERNAME/k3os:${$CIRCLE_SHA1},\
                  ghcr.io/$CIRCLE_USERNAME/k3os:${$CIRCLE_BRANCH}"
                extra_build_args: >-
                  --target=image
                  --build-arg BUILDKIT_INLINE_CACHE=1
                  --build-arg VERSION=$VERSION
                image: $CIRCLE_USERNAME/k3os
                registry: ghcr.io
                step-name: Docker build - k3os master
                tag: $CIRCLE_BRANCH
                use-buildkit: true
            - docker/push:
                registry: ghcr.io
                image: $CIRCLE_USERNAME/k3os
                tag: $CIRCLE_BRANCH
      - when:
          condition: << parameters.push >>
          steps:
            - docker/build:
                cache_from: "ghcr.io/$CIRCLE_USERNAME/k3os:latest,\
                  ghcr.io/$CIRCLE_USERNAME/k3os:${$CIRCLE_SHA1},\
                  ghcr.io/$CIRCLE_USERNAME/k3os:${$CIRCLE_BRANCH}"
                extra_build_args: >-
                  --target=image
                  --build-arg BUILDKIT_INLINE_CACHE=1
                  --build-arg VERSION=$VERSION
                image: $CIRCLE_USERNAME/k3os
                registry: ghcr.io
                step-name: Docker build - k3os
                tag: latest,$VERSION
                use-buildkit: true
            - docker/push:
                registry: ghcr.io
                image: $CIRCLE_USERNAME/k3os
                tag: latest,$VERSION
            - github/setup
            - run:
                name: Upload artifacts - $ARCH
                command: >-
                  gh release upload \
                    "$CIRCLE_TAG" \
                    ./dist/* \
                    --repo "$(git config --get remote.origin.url)"


  test:
    executor:
      name: go/default
      tag: '1.20'
    steps:
      - checkout
      - go/mod-download
      - go/test:
          covermode: atomic
          failfast: true
          race: true

workflows:
  feature:
    jobs:
      - test
      - build:
          executor: amd64
          push: false
          context: github
          filters:
            branches:
              ignore: master
          requires:
            - test

  continuous:
    jobs:
      - test
      - build: &rc-build
          name: Release candidate build (AMD64)
          executor: amd64
          push: false
          context: github
          filters:
            branches:
              only: master
          requires:
            - test
      - build:
          <<: *rc-build
          name: Release candidate build (ARM64)
          executor: arm64

  tags:
    jobs:
      - github/release:
          name: Create github release
          draft: true
          prerelease: true
          tag: $CIRCLE_TAG
          additional_args: --verify-tag --notes-from-tag
          context: github
          filters: &filter-tags
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - build:
          <<: *rc-build
          name: Tagged AMD64 release
          push: true
          filters: *filter-tags
          requires:
            - "Create github release"
      - build:
          <<: *rc-build
          name: Tagged ARM64 release
          executor: arm64
          push: true
          filters: *filter-tags
          requires:
            - "Create github release"
